package ai.personal.reader.domain.usecase

import ai.personal.reader.domain.model.Answer
import ai.personal.reader.domain.model.Question
import ai.personal.reader.domain.repository.ChatRepository
import ai.personal.reader.domain.repository.DocumentRepository
import kotlinx.datetime.Clock

class AskQuestionUseCase(
    private val chatRepository: ChatRepository,
    private val documentRepository: DocumentRepository // To retrieve document content if needed
) {
    suspend operator fun invoke(
        questionText: String,
        documentId: String? = null,
        sessionId: String
    ): Answer {
        val documentContent: String? =
            documentId?.let { documentRepository.getDocumentById(it)?.content }

        val question = Question(
            id = "", // Will be generated by data layer or a UUID generator
            sessionId = sessionId,
            text = questionText,
            timestamp = Clock.System.now().toEpochMilliseconds(),
            documentId = documentId
        )

        chatRepository.saveQuestion(question)

        val answer = chatRepository.askQuestion(question, documentContent)

        chatRepository.saveAnswer(answer)

        return answer
    }
} 